---
- name: Install Packages
  hosts: localhost
  become: yes

  tasks:
    - name: Check if Homebrew is installed
      command: which brew
      register: brew_path
      ignore_errors: yes

    - name: Install Homebrew if not installed
      shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      when: brew_path.rc != 0

    - name: Ensure Homebrew is up to date
      command: brew update
      when: brew_path.rc == 0
      become: no
    
    - name: Check if formula is installed
      command: brew list --formula "{{ item }}"
      register: brew_formula_check
      ignore_errors: yes
      loop:
        - neovim
      when: ansible_os_family == "Darwin"
      become: no

    - name: Install formulae using Homebrew
      async: 300
      poll: 0
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - neovim
      when: ansible_os_family == "Darwin"
      become: no
      register: formulae_jobs
      
    - name: Wait for Homebrew formulae to be installed
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: formulae_results
      until: formulae_results.finished
      retries: 30
      delay: 10
      loop: "{{ formulae_jobs.results }}"

    - name: Check if cask is installed
      command: brew list --cask "{{ item }}"
      register: brew_cask_check
      ignore_errors: yes
      loop:
        - bitwarden
        - arc
        - warp
        - raycast
        - cleanshot
        - aldente
      when: ansible_os_family == "Darwin"
      become: no
      
    - name: Install casks using Homebrew
      async: 300
      poll: 0
      community.general.homebrew_cask:
        name: "{{ item }}"
        state: present
      loop:
        - bitwarden
        - arc
        - warp
        - raycast
        - cleanshot
        - aldente
      when: ansible_os_family == "Darwin"
      become: no
      register: cask_jobs
    
    - name: Wait for Homebrew casks to be installed
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: cask_results
      until: cask_results.finished
      retries: 30
      delay: 10
      loop: "{{ cask_jobs.results }}"
